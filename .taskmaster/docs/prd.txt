# GPT-Powered Chatbot with Image Generation PRD

## Overview
This product is a web-based GPT-powered chatbot that allows users to interact with OpenAI's language models for text conversations and image generation. The application enables seamless switching between text chat and image generation modes, providing a versatile AI interaction experience. It serves anyone wanting to chat with large language models or generate AI images through a simple, intuitive interface without requiring technical knowledge.

## Core Features

### 1. Text-based Chat Interface
- **What**: A clean, message-based interface displaying user inputs and AI responses
- **Why**: Enables natural conversation flow between users and the AI
- **How**: Uses OpenAI's GPT-4.1-nano model with streaming responses to provide real-time feedback

### 2. Text Streaming
- **What**: Real-time display of AI responses as they're generated
- **Why**: Creates a more engaging and immediate user experience
- **How**: Implements OpenAI's streaming API with NextJS server components and React to render incoming tokens

### 3. Image Generation Toggle
- **What**: Ability to switch between text chat and image generation modes
- **Why**: Allows users to leverage both text and image generation capabilities in a single interface
- **How**: Uses OpenAI's gpt-image-1 model with a UI toggle to switch modes

### 4. New Chat Functionality
- **What**: Option to start a fresh conversation
- **Why**: Lets users begin new topics without history influencing AI responses
- **How**: Clears conversation history and resets the interface while storing previous chats in Supabase

## User Experience

### User Personas
1. **Casual User**: Wants a simple way to interact with AI for entertainment or basic information
2. **Content Creator**: Uses the tool to generate ideas or content for their work
3. **Curious Explorer**: Experiments with AI capabilities for learning purposes

### Key User Flows
1. **Text Chat Flow**:
   - User enters site → Types message → Views streaming response → Continues conversation
   
2. **Image Generation Flow**:
   - User enters site → Toggles to image mode → Describes desired image → Receives generated image
   
3. **New Chat Flow**:
   - User clicks "New Chat" → Previous conversation is stored → Fresh interface is presented

### UI/UX Considerations
- Clean, minimal interface with focus on content
- Clear visual distinction between user and AI messages
- Obvious toggle for switching between text and image modes
- Intuitive input area with send button and clear indication of active mode

## Technical Architecture

### System Components
1. **Frontend**:
   - NextJS App Directory structure for routing and server components
   - React components for UI elements and state management
   - TailwindCSS for styling with ShadUI for reusable components
   
2. **Backend**:
   - Supabase Edge Functions for chat functionality
   - Supabase Database for storing chat messages
   
3. **External Services**:
   - OpenAI API for GPT-4.1-nano text generation
   - OpenAI API for gpt-image-1 image generation

### Data Models
1. **Chat Message**:
   ```
   {
     id: string
     created_at: timestamp
     chat_id: string
     role: 'user' | 'assistant'
     content: string
     type: 'text' | 'image'
     image_url?: string
   }
   ```

2. **Chat Session**:
   ```
   {
     id: string
     created_at: timestamp
     updated_at: timestamp
     title: string (derived from first message)
   }
   ```

### APIs and Integrations
1. **OpenAI Text Generation**:
   - Model: gpt-4.1-nano-2025-04-14
   - Streaming format for real-time response display
   
2. **OpenAI Image Generation**:
   - Model: gpt-image-1
   - Standard request/response pattern
   
3. **Supabase Database**:
   - Tables for storing chat sessions and messages
   - SQL migrations for schema management
   
4. **Supabase Edge Functions**:
   - Serverless functions to handle chat logic and API interactions

### Infrastructure Requirements
- Local Supabase instance for development
- NextJS development server
- Environment variables for API keys and endpoints

## Development Roadmap

### Phase 1: MVP Foundation
1. Set up project structure with NextJS App Directory
2. Implement basic UI components with TailwindCSS and ShadUI
3. Create chat interface layout
4. Set up Supabase local instance and database schema
5. Implement text chat functionality with OpenAI streaming

### Phase 2: Core Features
1. Add image generation capability with mode toggle
2. Implement message storage in Supabase
3. Create "New Chat" functionality
4. Enhance UI with improved styling and responsiveness

### Phase 3: Refinement
1. Optimize API usage and error handling
2. Improve response formatting and display
3. Add loading states and feedback mechanisms
4. Ensure cross-browser compatibility

## Logical Dependency Chain

### Foundation Layer
1. Project setup with NextJS, TailwindCSS, and ShadUI
2. Supabase local setup with initial migrations
3. Basic UI layout and components

### Core Functionality Layer
1. Text chat implementation with OpenAI integration
2. Streaming response rendering
3. Supabase database integration for message storage

### Feature Expansion Layer
1. Image generation mode with toggle
2. New chat functionality

### Refinement Layer
1. Error handling
2. Loading states
3. UI polish

## Risks and Mitigations

### Technical Challenges
- **Risk**: OpenAI API rate limits could affect user experience
  **Mitigation**: Implement proper error handling and feedback for rate limit cases
  
- **Risk**: Stream processing might be complex to implement correctly
  **Mitigation**: Follow OpenAI documentation examples closely and use established patterns

### MVP Scoping
- **Risk**: Feature creep could delay completion
  **Mitigation**: Strict adherence to MVP requirements; defer additional features to future versions
  
- **Risk**: Integration between NextJS and Supabase might have unexpected challenges
  **Mitigation**: Use documented examples and patterns from the provided technical documentation

### Resource Constraints
- **Risk**: Development environment setup might be time-consuming
  **Mitigation**: Follow clear setup instructions for Supabase local instance
  
- **Risk**: API costs for extensive testing
  **Mitigation**: Use smaller models during development when possible

## Appendix

### Technical Documentation References
- NextJS App Directory: Refer to NextJS_AppDirectory.md
- OpenAI Text Streaming: Follow OpenAI_StreamText.md with gpt-4.1-nano
- OpenAI Image Generation: Use OpenAI_ImageGeneration.md with gpt-image-1
- Supabase Edge Functions: Implement as per Supabase_EdgeFunctions.md
- Supabase Database: Configure using Supabase_Migrations_Local.md

### Future Enhancements (Not Part of MVP)
- User authentication
- Chat history browsing
- Dark/light mode toggle
- Performance optimizations
- Keyboard shortcuts
- Animations and transitions
- Deployment pipeline
- Security hardening

## Implementation Tasks

### Task 1: Set up NextJS project with TailwindCSS and ShadUI
**Status:** Pending | **Priority:** High | **Dependencies:** None

**Description:** Initialize the project structure with NextJS App Directory, configure TailwindCSS, and set up ShadUI components for the UI foundation.

**Implementation Details:**
- Create NextJS app with App Directory structure
- Install and configure TailwindCSS
- Set up ShadUI component library
- Configure initial project settings and environment variables
- Create basic folder structure for components, pages, and utilities

**Test Strategy:** Verify that the NextJS dev server starts successfully, TailwindCSS classes are applied correctly, and ShadUI components can be imported and rendered.

---

### Task 2: Set up Supabase local instance and database schema
**Status:** Pending | **Priority:** High | **Dependencies:** Task 1

**Description:** Initialize Supabase locally, create database migrations for chat sessions and messages tables, and configure the connection.

**Implementation Details:**
- Initialize Supabase CLI and start local instance
- Create migration for chat_sessions table (id, created_at, updated_at, title)
- Create migration for chat_messages table (id, created_at, chat_id, role, content, type, image_url)
- Set up RLS policies for both tables
- Test database connection from NextJS

**Test Strategy:** Run migrations successfully, verify tables exist in local Supabase, test basic CRUD operations on both tables.

---

### Task 3: Create basic chat UI layout and components
**Status:** Pending | **Priority:** High | **Dependencies:** Task 1

**Description:** Build the main chat interface with message display area, input field, and send button using React and TailwindCSS.

**Implementation Details:**
- Create ChatContainer component for the main layout
- Build MessageList component to display conversation history
- Create MessageBubble component with distinct styling for user vs AI messages
- Build ChatInput component with textarea and send button
- Implement basic state management for messages using React hooks
- Style components with TailwindCSS following clean, minimal design

**Test Strategy:** Verify UI renders correctly, input accepts text, messages can be added to state and displayed in the message list.

---

### Task 4: Implement OpenAI GPT-4.1-nano text streaming
**Status:** Pending | **Priority:** High | **Dependencies:** Tasks 2, 3

**Description:** Integrate OpenAI API for text generation with streaming responses using the gpt-4.1-nano-2025-04-14 model.

**Implementation Details:**
- Create Supabase Edge Function for OpenAI API calls
- Implement streaming response handling using OpenAI's streaming API
- Set up proper error handling for API failures and rate limits
- Configure environment variables for OpenAI API key
- Implement token-by-token rendering in the UI
- Add loading states while streaming

**Test Strategy:** Send a test message and verify streaming responses appear in real-time, check error handling for invalid API keys or rate limits.

---

### Task 5: Integrate message storage with Supabase
**Status:** Pending | **Priority:** Medium | **Dependencies:** Tasks 2, 4

**Description:** Connect the chat functionality to Supabase database to persist all messages and chat sessions.

**Implementation Details:**
- Create functions to save messages to chat_messages table
- Implement chat session creation and management
- Auto-generate chat title from first message
- Load existing chat history on component mount
- Update timestamps appropriately
- Handle database errors gracefully

**Test Strategy:** Send messages and verify they're saved to Supabase, refresh page and confirm messages persist, check that chat sessions are created correctly.

---

### Task 6: Add image generation capability with mode toggle
**Status:** Pending | **Priority:** Medium | **Dependencies:** Tasks 4, 5

**Description:** Implement OpenAI image generation using gpt-image-1 model with a UI toggle to switch between text and image modes.

**Implementation Details:**
- Create toggle component to switch between text and image modes
- Implement OpenAI image generation API integration using gpt-image-1
- Add Edge Function for image generation requests
- Display generated images in the message list
- Store image URLs in database along with messages
- Update UI to show different input placeholder based on mode
- Add loading state for image generation (usually slower than text)

**Test Strategy:** Toggle to image mode, submit an image prompt, verify image is generated and displayed, confirm image URL is saved to database.

---

### Task 7: Implement 'New Chat' functionality
**Status:** Pending | **Priority:** Medium | **Dependencies:** Task 5

**Description:** Add ability to start a new conversation while preserving previous chat history in the database.

**Implementation Details:**
- Add 'New Chat' button to the UI
- Implement function to save current chat session
- Clear the message state to start fresh conversation
- Create new chat_session record in database
- Reset UI state (input, mode, etc.)
- Provide visual feedback for the action

**Test Strategy:** Click 'New Chat' button, verify current messages are saved, confirm new empty chat interface appears, check database for both old and new chat sessions.

---

### Task 8: Add error handling and user feedback mechanisms
**Status:** Pending | **Priority:** Medium | **Dependencies:** Tasks 4, 6

**Description:** Implement comprehensive error handling for API failures, rate limits, and network issues with proper user notifications.

**Implementation Details:**
- Create error notification component (toast/alert)
- Handle OpenAI API rate limit errors with user-friendly messages
- Implement retry logic for failed requests
- Add network error detection and feedback
- Handle edge cases (empty inputs, long messages, etc.)
- Provide clear error messages for different failure scenarios
- Add error boundaries to prevent app crashes

**Test Strategy:** Trigger various error conditions (invalid API key, rate limits, network disconnection) and verify appropriate error messages are shown to users.

---

### Task 9: Enhance UI with loading states and improved styling
**Status:** Pending | **Priority:** Low | **Dependencies:** Tasks 3, 6, 7

**Description:** Polish the user interface with loading indicators, smooth transitions, and responsive design improvements.

**Implementation Details:**
- Add loading spinner/skeleton for message streaming
- Implement loading state for image generation
- Add smooth scroll to newest message
- Improve responsive design for mobile devices
- Add hover states and visual feedback for interactive elements
- Enhance color scheme and typography
- Add subtle animations for message appearance
- Ensure accessibility (keyboard navigation, ARIA labels)

**Test Strategy:** Test on different screen sizes, verify loading states appear during operations, check animations are smooth, ensure keyboard navigation works.

---

### Task 10: Optimize performance and ensure cross-browser compatibility
**Status:** Pending | **Priority:** Low | **Dependencies:** Tasks 8, 9

**Description:** Test and optimize the application for performance, fix any browser-specific issues, and ensure consistent experience across platforms.

**Implementation Details:**
- Test in Chrome, Firefox, Safari, and Edge browsers
- Optimize re-renders using React.memo and useMemo where appropriate
- Implement code splitting for better load times
- Minimize API calls and implement request debouncing
- Test and fix any CSS inconsistencies across browsers
- Ensure mobile browser compatibility
- Add performance monitoring for streaming responses
- Profile and optimize bundle size

**Test Strategy:** Run the app in all major browsers, use browser dev tools to check for performance issues, verify consistent UI across platforms, measure and optimize load times.

---

## Task Summary & Progress Tracking

### High Priority Foundation (Tasks 1-4)
- [ ] Task 1: NextJS + TailwindCSS + ShadUI Setup
- [ ] Task 2: Supabase Local Instance & Database Schema
- [ ] Task 3: Basic Chat UI Layout & Components
- [ ] Task 4: OpenAI GPT-4.1-nano Text Streaming

### Medium Priority Core Features (Tasks 5-8)
- [ ] Task 5: Message Storage with Supabase
- [ ] Task 6: Image Generation with Mode Toggle
- [ ] Task 7: New Chat Functionality
- [ ] Task 8: Error Handling & User Feedback

### Low Priority Polish (Tasks 9-10)
- [ ] Task 9: UI Enhancement & Loading States
- [ ] Task 10: Performance Optimization & Cross-browser Compatibility

**Development Progress:** 0/10 tasks completed (0%)

